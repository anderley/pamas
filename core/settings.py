'''
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
'''

import os
from pathlib import Path

from import_export.formats.base_formats import CSV, XLSX
from storages.backends.s3boto3 import S3Boto3Storage

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SITE_URL = os.environ.get('DJ_SITE_URL', 'http://localhost:8001')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJ_SECRET_KEY', 'DJ_KEY') # noqa

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJ_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = [
    os.environ.get('DJ_ALLOWED_HOSTS', 'localhost')
]

CSRF_TRUSTED_ORIGINS = [
    os.environ.get('DJ_CSRF_TRUSTED_ORIGINS', 'https://localhost')
]

ADMINS = [
         ("Willem", "willemarf@gmail.com"),
]

# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    # Add-ons
    'crispy_forms',
    'crispy_bootstrap4',
    'import_export',
    'mercadopago',
    'request_token',
    'storages',
    'health_check',
    'health_check.db',
    # Apps
    'core',
    'planos',
    'quiz',
    'usuarios',
    'pagamentos',
    'notificacoes',
    'logs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Add-ons
    'request_token.middleware.RequestTokenMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DB_NAME', 'db_educart_quiz'),
        'USER': os.environ.get('DB_USER', 'user_educart'),
        'PASSWORD': os.environ.get('DB_PASSWORD', 'password'),
        'HOST':  os.environ.get('DB_HOST', 'db'),
        'PORT':  os.environ.get('DB_PORT', '3306'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', # noqa
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', # noqa
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

if DEBUG:
    MEDIA_URL = 'media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_URL)

    STATIC_URL = 'static/'
    STATIC_ROOT = os.path.join(BASE_DIR, STATIC_URL)
    
else:

    # Set the required AWS credentials
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_S3_REGION_NAME = os.environ.get(
        'AWS_S3_REGION_NAME', 'us-east-1'
    )
    AWS_STORAGE_BUCKET_NAME = os.environ.get(
        'AWS_STORAGE_STATICS_BUCKET_NAME', 'pamas-statics'
    )
    AWS_S3_FILE_OVERWRITE = True
    AWS_DEFAULT_ACL = None
    AWS_QUERYSTRING_AUTH = False
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com' # noqa

    STATICFILES_LOCATION = 'static'
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/' # noqa
    STATICFILES_DIRS = [
        BASE_DIR / STATICFILES_LOCATION
    ]

    MEDIAFILES_LOCATION = 'media'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/' # noqa

    STORAGES = {
        'default': {
            'BACKEND': 'core.custom_storage.MediaStorage'
        },
        'staticfiles': {
            'BACKEND': 'core.custom_storage.StaticStorage'
        }
    }

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap4'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

# JAZZMIN_SETTINGS = {
#     # title of the window (Will default to current_admin_site.site_title if absent or None) # noqa
#     'site_title': 'Library Admin',
#
#     # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None) # noqa
#     'site_header': 'Library',
#
#     # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None) # noqa
#     'site_brand': 'Library',
#
#     # Logo to use for your site, must be present in static files, used for brand on top left # noqa
#     'site_logo': 'imgs/logo.png',
# }

# Login

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', False)
EMAIL_PORT = os.environ.get('EMAIL_PORT', 8025)
EMAIL_HOST_USER = os.environ.get(
    'EMAIL_HOST_USER', 'atendimento@pamas.com.br'
)
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# JWT Request Token
REQUEST_TOKEN_EXPIRY = os.environ.get('REQUEST_TOKEN_EXPIRY', '1d')
REQUEST_TOKEN_DEFAULT_MAX_USES = os.environ.get(
    'REQUEST_TOKEN_DEFAULT_MAX_USES', 10
)

FOUR03_TEMPLATE = os.path.join(BASE_DIR, '...', '403.html')

# Logging
LOGGING = {
    'version': 1,  # the dictConfig format version
    'disable_existing_loggers': False,  # retain the default loggers
    'formatters': {
        'simple': {
            'format': '[{asctime}] "{funcName}" {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        }
    },
    'loggers': {
        '': {
            'level': 'INFO',
            'handlers': ['console'],
        }
    }
}

MERCADOPAGO_CLIENT_ID = os.environ.get('MERCADOPAGO_CLIENT_ID', '4634839706246803') # noqa
MERCADOPAGO_CLIENT_SECRET = os.environ.get('MERCADOPAGO_CLIENT_SECRET', 'tRgjoQzo0iCZnKH2xMFDiq37K2vDgG6d') # noqa
MERCADOPAGO_PUBLIC_KEY = os.environ.get('MERCADOPAGO_PUBLIC_KEY', 'TEST-400c31db-5224-4d4b-86e5-6fa7dbcba616') # noqa
MERCADOPAGO_ACCESS_TOKEN = os.environ.get('MERCADOPAGO_ACCESS_TOKEN', 'TEST-4634839706246803-052314-c8cd6ae245aa6e578c65ce97de7bce6b-2360331') # noqa
MERCADOPAGO_ASS_SECRET_WEBHOOK = os.environ.get('MERCADOPAGO_ASS_SECRET_WEBHOOK', 'cfad10dd6dcf6bfa372f8d79198e8feb6a12b5c1ba08fb6209708f3305696299') # noqa

DATE_FORMAT_DEFAULT = '%d/%m/%y'
DATETIME_FORMAT_DEFAULT = '%d/%m/%y %H:%m:%s'
TIMEOUT_FORMULARIO = os.environ.get('TIMEOUT_FORMULARIO', 120)  # Minutos

IMPORT_FORMATS = [CSV, XLSX]

# WKHTMLTOPDF_CMD_OPTIONS = {
#     'quiet': True,
# }

# AWS Config
AWS_STORAGE_PDF_BUCKET_NAME = 'pamas'
