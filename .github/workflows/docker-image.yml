name: Docker Image CI

on:
  push:
    branches: [ "main" ]

env:
  DB_HOST: ${{ vars.DB_HOST }} 
  DB_PORT: 3306
  DB_NAME: db_pamas
  DB_USER: ${{ vars.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REGISTRY: ${{ vars.AWS_ECR_REGISTRY }}
  ECR_REPOSITORY: pamas
  IMAGE_TAG: ${{ github.sha }}
  ECS_SERVICE: pamas-service
  ECS_CLUSTER: pamas-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: pamas-container

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run migrations
      run: |
        python manage.py makemigrations core notificacoes pagamentos planos quiz usuarios
        python manage.py migrate

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::571600840645:role/GitHubAction-AssumeRoleWithAction
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build the Docker image
      id: build-image
      run: |
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY || true
        docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> $GITHUB_OUTPUT
    
    - name: Push
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
